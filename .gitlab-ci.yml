stages:
    - formatting
    - merge-request-conventional-commits-linting
    - merge-request-conventional-commits-next-version
    - builds
    - unit-tests
    - releasing
    - building-release


formatting:
    stage: formatting
    image: archlinux/base
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S rust diffutils gawk grep --noconfirm
    script:
        - for i in $( du -a ./src/ | awk '{print $2}' | grep -i "[.]rs$" ); do
        - echo $i
        - cp $i temp.txt
        - rustfmt $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"


merge-request-conventional-commits-linting:
    stage: merge-request-conventional-commits-linting
    image: node
    before_script:
        - npm install -g @commitlint/cli @commitlint/config-conventional
    script:
        # Get latest tag commit hash.
        - LATEST_TAG=`git tag -l | sort -r | head -1`
        - LATEST_TAG_HASH=`git rev-parse $LATEST_TAG`
        # Lint all the commits in the PR.
        - commitlint --from=$LATEST_TAG_HASH
    rules:
        - if: $CI_MERGE_REQUEST_ID


merge-request-conventional-commits-next-version:
    stage: merge-request-conventional-commits-next-version
    image: archlinux/base
    before_script:
        - pacman -Syu --noconfirm
        - pacman -S diffutils unzip nettle wget git --noconfirm
    script:
        # Get version.
        - VERSION=`grep '^version = "[0-9].[0-9].[0-9]"$' Cargo.toml | cut -d '"' -f 2`
        # Get latest tag commit hash.
        - LATEST_TAG=`git tag -l | sort -r | head -1`
        - LATEST_TAG_HASH=`git rev-parse $LATEST_TAG`
        # Download conventional-commits-next-version tag 0.4.0
        - wget https://gitlab.com/DeveloperC/conventional-commits-next-version/-/jobs/artifacts/0.4.0/download?job=building-release
        - unzip download\?job=building-release
        # Compare current version vs expected.
        - EXPECTED_VERSION=`./conventional_commits_next_version --batch-commits --from-commit $LATEST_TAG_HASH --version $LATEST_TAG`
        - echo $VERSION
        - echo $EXPECTED_VERSION
        - test \"$VERSION\" = \"$EXPECTED_VERSION\"
    rules:
        - if: $CI_MERGE_REQUEST_ID


builds:
    stage: builds
    image: rust
    script:
        - cargo build
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"


unit-tests:
    stage: unit-tests
    image: rust
    script:
        - cargo test
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"


releasing:
    stage: releasing
    image: registry.gitlab.com/gitlab-org/release-cli
    before_script:
        - apk add git
    script:
        # Test if tag already exists for version.
        - VERSION=`grep '^version = "[0-9].[0-9].[0-9]"$' Cargo.toml | cut -d '"' -f 2`
        - VERSION_TAG_EXISTS=`git show-ref --tags -d | awk "/ refs\/tags\/$VERSION/" | wc -l`
        - test $VERSION_TAG_EXISTS -eq 1 && exit 0
        # Creating changelog.
        - LATEST_EXISTING_TAG=`git tag -l | sort -r | head -1`
        - LATEST_EXISTING_TAG_COMMIT=`git rev-list -n 1 $LATEST_EXISTING_TAG`
        - wget https://github.com/clog-tool/clog-cli/releases/download/v0.9.3/clog-v0.9.3-x86_64-unknown-linux-musl.tar.gz
        - tar xvf clog-v0.9.3-x86_64-unknown-linux-musl.tar.gz
        - RELEASE_DESCRIPTION=`./clog --from $LATEST_EXISTING_TAG_COMMIT --link-style Gitlab --subtitle $VERSION | tail -n +2`
        # Create release/new tag.
        - release-cli create --name $VERSION --description "$RELEASE_DESCRIPTION" --tag-name $VERSION --ref $CI_COMMIT_SHA
    rules:
        - if: $CI_COMMIT_BRANCH == "master"


building-release:
    stage: building-release
    image: rust
    script:
        - cargo build --release
        - mv target/release/rust-monkey-interpreter rust-monkey-interpreter
    artifacts:
        paths:
            - rust-monkey-interpreter
    rules:
        - if: $CI_COMMIT_TAG
