image: archlinux/base


stages:
    - formatting
    - builds
    - unit-tests
    - releasing
    - building-release


formatting:
    stage: formatting
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S rust diffutils gawk grep --noconfirm
    script:
        - for i in $( du -a ./src/ | awk '{print $2}' | grep -i "[.]rs$" ); do
        - echo $i
        - cp $i temp.txt
        - rustfmt $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_COMMIT_BRANCH


builds:
    stage: builds
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo build
    rules:
        - if: $CI_COMMIT_BRANCH


unit-tests:
    stage: unit-tests
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo test
    rules:
        - if: $CI_COMMIT_BRANCH


releasing:
    stage: releasing
    image: registry.gitlab.com/gitlab-org/release-cli
    before_script:
        - apk add git
    script:
        # Get version.
        - VERSION=`grep '^version = "[0-9].[0-9].[0-9]"$' Cargo.toml | cut -d '"' -f 2`
        - VERSION_EXISTS=`echo $VERSION | grep '^[0-9].[0-9].[0-9]$' | wc -l`
        - test $VERSION_EXISTS -ne 1 && { echo >&2 "Unable to parse out the semantic version. Aborting."; exit 1;}
        # Test if tag already exists for version.
        - VERSION_TAG_EXISTS=`git show-ref --tags -d | awk "/ refs\/tags\/$VERSION/" | wc -l`
        - test $VERSION_TAG_EXISTS -eq 1 && exit 0
        # Creating changelog.
        - LATEST_EXISTING_TAG=`git tag -l | sort -r | head -1`
        - LATEST_EXISTING_TAG_COMMIT=`git rev-list -n 1 $LATEST_EXISTING_TAG`
        - wget https://github.com/clog-tool/clog-cli/releases/download/v0.9.3/clog-v0.9.3-x86_64-unknown-linux-musl.tar.gz
        - tar xvf clog-v0.9.3-x86_64-unknown-linux-musl.tar.gz
        - RELEASE_DESCRIPTION=`./clog --from $LATEST_EXISTING_TAG_COMMIT --link-style Gitlab --subtitle $VERSION | tail -n +2`
        # Create release/new tag.
        - release-cli create --name $VERSION --description "$RELEASE_DESCRIPTION" --tag-name $VERSION --ref $CI_COMMIT_SHA
    rules:
        - if: $CI_COMMIT_BRANCH == "master"


building-release:
    stage: building-release
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo build --release
        - mv target/release/rust-monkey-interpreter rust-monkey-interpreter
    artifacts:
        paths:
            - rust-monkey-interpreter
    rules:
        - if: $CI_COMMIT_TAG
