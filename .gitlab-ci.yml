stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - conventional-commits-next-version-checking
  - formatting
  - linting
  - version-badge-checking
  - compiling
  - unit-testing
  - releasing
  - release-binary-compiling


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  RELEASE_BIN_NAME: "release-cli-linux-amd64"
  GIT_CLIFF_VERSION: "0.5.0"


clean-git-history-checking:
  stage: clean-git-history-checking
  image: rust
  before_script:
    - cargo install clean_git_history
  script:
    # Check all the commits in the branch.
    - /usr/local/cargo/bin/clean_git_history --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  image: rust
  before_script:
    - cargo install conventional_commits_linter
  script:
    # Lint all the commits in the branch.
    - /usr/local/cargo/bin/conventional_commits_linter --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" --allow-angular-type-only
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-next-version-checking:
  stage: conventional-commits-next-version-checking
  image: rust
  before_script:
    - cargo install conventional_commits_next_version
  script:
    # Get current version.
    - CURRENT_VERSION=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" "Cargo.toml" | cut -d '"' -f 2)
    # Check current version is in semantic versioning.
    - echo "${CURRENT_VERSION}" | grep "^${SEMANTIC_VERSIONING_REGEX}$"
    # Get latest tag.
    - LATEST_TAG=$(git tag --sort=-committerdate | head -1)
    # Check latest tag is in semantic versioning.
    - echo "${LATEST_TAG}" | grep "^${SEMANTIC_VERSIONING_REGEX}$"
    # Check current vs expected.
    - /usr/local/cargo/bin/conventional_commits_next_version --batch-commits --from-reference "${LATEST_TAG}" --from-version "${LATEST_TAG}" --current-version "${CURRENT_VERSION}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


formatting:
  stage: formatting
  image: rust
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check --config=group_imports=StdExternalCrate
  rules:
    - if: $CI_MERGE_REQUEST_ID


linting:
  stage: linting
  image: rust
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy --verbose --workspace --all-targets -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --all-features -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --no-default-features -- -D warnings
  rules:
    - if: $CI_MERGE_REQUEST_ID


version-badge-checking:
  stage: version-badge-checking
  image: alpine
  script:
    # Get current version.
    - CURRENT_VERSION=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" "Cargo.toml" | cut -d '"' -f 2)
    # Check current version is in semantic versioning.
    - echo "${CURRENT_VERSION}" | grep "^${SEMANTIC_VERSIONING_REGEX}$"
    # Check README version badge and version match.
    - grep "(https://img.shields.io/badge/Version-${CURRENT_VERSION}-blue)]" README.md
  rules:
    - if: $CI_MERGE_REQUEST_ID


compiling:
  stage: compiling
  image: rust
  script:
    - cargo build --verbose --workspace
    - cargo build --verbose --workspace --all-features
    - cargo build --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


unit-testing:
  stage: unit-testing
  image: rust
  script:
    - cargo test --verbose --workspace
    - cargo test --verbose --workspace --all-features
    - cargo test --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"


releasing:
  stage: releasing
  image: rust
  script:
    # Get current version.
    - CURRENT_VERSION=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" "Cargo.toml" | cut -d '"' -f 2)
    # If the tag already exist then exit.
    - NEW_TAG=${CURRENT_VERSION}
    - git tag -l | grep "^${NEW_TAG}$" && exit 0
    # Get latest tag.
    - LATEST_TAG=$(git tag --sort=-committerdate | head -1)
    # Install release description generator.
    - wget "https://github.com/orhun/git-cliff/releases/download/v${GIT_CLIFF_VERSION}/git-cliff-${GIT_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    - tar xzvf "git-cliff-${GIT_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    # Generate the release description.
    - RELEASE_DESCRIPTION=$(./git-cliff-${GIT_CLIFF_VERSION}/git-cliff "${LATEST_TAG}.." --tag "${NEW_TAG}" --strip all)
    # Install GitlabCI cli releasing tool.
    - wget "https://release-cli-downloads.s3.amazonaws.com/latest/${RELEASE_BIN_NAME}"
    - chmod 755 "${RELEASE_BIN_NAME}"
    # Create the new release.
    - ./${RELEASE_BIN_NAME} create
      --name "${CURRENT_VERSION}"
      --description "${RELEASE_DESCRIPTION}"
      --tag-name "${NEW_TAG}"
      --ref "${CI_COMMIT_SHA}"
      --assets-link '{"name":"x86_64-linux-musl-binary.zip","url":"https://gitlab.com/DeveloperC/monkey_interpreter/-/jobs/artifacts/'${CURRENT_VERSION}'/download?job=release-binary-compiling-x86_64-linux-musl"}'
  rules:
    - if: $CI_COMMIT_BRANCH == "master"


release-binary-compiling-x86_64-linux-musl:
  stage: release-binary-compiling
  image: rust:alpine
  before_script:
    - apk add --no-cache musl-dev git
  script:
    - cargo build --release --target x86_64-unknown-linux-musl
    - mv target/x86_64-unknown-linux-musl/release/monkey_interpreter monkey_interpreter
    - strip monkey_interpreter
  artifacts:
    paths:
      - monkey_interpreter
  rules:
    - if: $CI_COMMIT_TAG
