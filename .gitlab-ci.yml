image: archlinux/base


stages:
    - formatting
    - builds
    - unit-tests
    - releasing


formatting:
    stage: formatting
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S rust diffutils gawk grep --noconfirm
    script:
        - for i in $( du -a ./src/ | awk '{print $2}' | grep -i "[.]rs$" ); do
        - echo $i
        - cp $i temp.txt
        - rustfmt $i
        - cmp $i temp.txt
        - done
    rules:
        - if: $CI_COMMIT_BRANCH


builds:
    stage: builds
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo build
    rules:
        - if: $CI_COMMIT_BRANCH


unit-tests:
    stage: unit-tests
    before_script:
        - pacman -Sy --noconfirm
        - pacman -S base-devel libffi rust --noconfirm
    script:
        - cargo test
    rules:
        - if: $CI_COMMIT_BRANCH


releasing:
    stage: releasing
    image: registry.gitlab.com/gitlab-org/release-cli
    before_script:
        - apk add git
    script:
        # Get version.
        - VERSION=`grep '^version = "[0-9].[0-9].[0-9]"$' Cargo.toml | cut -d '"' -f 2`
        - VERSION_EXISTS=`echo $VERSION | grep '^[0-9].[0-9].[0-9]$' | wc -l`
        - test $VERSION_EXISTS -ne 1 && { echo >&2 "Unable to parse out the semantic version. Aborting."; exit 1;}
        # Test if tag already exists for version.
        - VERSION_TAG_EXISTS=`git show-ref --tags -d | awk "/ refs\/tags\/$VERSION/" | wc -l`
        - test $VERSION_TAG_EXISTS -eq 1 && exit 0
        # Create release/new tag.
        - release-cli create --name $VERSION --description "Releasing $CI_COMMIT_REF_NAME as version $VERSION." --tag-name $VERSION --ref $CI_COMMIT_SHA
    rules:
        - if: $CI_COMMIT_BRANCH == "master"
